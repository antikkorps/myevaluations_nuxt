// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


//USERS AND ROLES
model User {
  id        String     @id @default(uuid())
  lastname  String?    @db.VarChar(255)
  firstname String?    @db.VarChar(255)
  email     String     @db.VarChar(255) @unique
  phone     String?    @db.VarChar(255)
  password  String     @db.VarChar(255)
  fonction  String?    @db.VarChar(255)
  avatar    String?    @db.VarChar(255)
  status    Status     @default(FREE)

  //entreprise
  entreprise_id Int?
  entreprise    Company? @relation(fields: [entreprise_id], references: [id])

  //role
  
  role    Role @default(USER)

  //Forms created by the user
  forms Form[]

  //relations to evaluations
  evaluations_formateur   Evaluation[] @relation("formateur")
  evaluations_participant Evaluation[] @relation("participant")

  //reset Token

  resetToken String? @db.VarChar(255)
  resetTokenExpiry DateTime?

  //Date of creation and update
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //mail verified
  mailVerified Boolean @default(false)

  //index on email et name
  @@index([email], name: "email")
  @@index([lastname], name: "lastname")
  @@map("users")
}

enum Role {
  USER
  ADMIN
  MANAGER
  FORMATEUR
  CLIENT_PARTICIPANT
  CLIENT_MANAGER

  @@map("roles")
}

enum Status {
  FREE
  PAID
  PREMIUM
  CANCELED


  @@map("status")
}

//EVALUATIONS
model Evaluation {
  id               Int               @id @default(autoincrement())
  date             DateTime

  //global note && comment
  note_globale     Int               @default(0)
  commentaire      String?
  
  //formateur and participant
  formateur_id     String?
  formateur        User?              @relation("formateur", fields: [formateur_id], references: [id])
  participant_id   String?
  participant      User?              @relation("participant", fields: [participant_id], references: [id])
  
  //contrat
  contrat_id       Int?
  contrat          Contrat?           @relation(fields: [contrat_id], references: [id])
  
  //Field values
  field_Value     Field_Value[]
  @@map("evaluations")
}

//ENTREPRISES AND CONTRACTS
model Company {
  id       Int       @id @default(autoincrement())
  name     String
  address  String?
  city     String?
  zipcode  String?
  country String?
  logo String?
  contrats Contrat[]
  users     User[]
  forms     Form[]

  @@map("companies")
}

model Contrat {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  published   Boolean  @default(false)
  begin_date  DateTime @default(now())
  end_date    DateTime @default(now())
  nombre_de_seances Int?
  theme       String
  

  // client ID which references the Entreprise model
  client_id  Int
  entreprise Company @relation(fields: [client_id], references: [id])

  // Methode used in the contrat
  contrat_methodes Contrat_Methode[]

  //Evaluations linked to the contrat
  evaluations Evaluation[]

  @@map("contrats")
}

//METHODES
model Contrat_Methode {
  id         Int     @id @default(autoincrement())
  contrat_id Int
  methode_id Int
  contrat    Contrat @relation(fields: [contrat_id], references: [id])
  methode    Methode @relation(fields: [methode_id], references: [id])

  @@map("contrat_methodes")
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  methode_tags Methode_Tag[]

  @@map("tags")
}

model Methode_Tag {
  id         Int     @id @default(autoincrement())
  methode_id Int
  tag_id     Int
  methode    Methode @relation(fields: [methode_id], references: [id])
  tag        Tag     @relation(fields: [tag_id], references: [id])

  @@map("methode_tags")
}

model Methode {
  id               Int               @id @default(autoincrement())
  name             String
  description      String?
  contrat_methodes Contrat_Methode[]
  methode_tags     Methode_Tag[]
  forms            Form[]

  @@map("methodes")
}

//CREATION OF FORMS BY THE USER
model Form {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  published   Boolean  @default(true)
  user_id     String
  user        User     @relation(fields: [user_id], references: [id])
  fields      Field[]
  fieldValues Field_Value[]
  methode_id  Int?
  methode     Methode? @relation(fields: [methode_id], references: [id])
  company_id  Int?
  company     Company? @relation(fields: [company_id], references: [id])

  @@map("forms")
}

model Field {
  id          Int      @id @default(autoincrement())
  type        FieldType   @default(TEXT)
  label       String?
  fieldValues Field_Value[]
  form_id     Int
  form        Form     @relation(fields: [form_id], references: [id])

  @@map("fields")
  
}

//ENUM FOR TYPE FIELD
enum FieldType {
  TEXT
  TEXTAREA
  RADIO
  CHECKBOX
  SELECT
  DATE
  TIME
  DATETIME
  EMAIL
  NUMBER
  PASSWORD
  FILE
  HIDDEN
  COLOR
  RANGE
  TEL
  URL
  SEARCH
  MONTH
  WEEK
  IMAGE
  BUTTON
  SUBMIT
  RESET
  BOOLEAN
}

//VALUE OF THE FIELD THAT THE USER_PARTICIPANT WILL FILL
model Field_Value {
  id          Int      @id @default(autoincrement())
  value       String? 
  field_id    Int
  field       Field    @relation(fields: [field_id], references: [id])
  form_id     Int
  form        Form     @relation(fields: [form_id], references: [id])
  evaluation_id Int?
  evaluation    Evaluation? @relation(fields: [evaluation_id], references: [id])

  @@map("field_values")
}
